package ru.mkilord.node.controller;

import jakarta.annotation.PostConstruct;
import lombok.AllArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import ru.mkilord.node.command.*;
import ru.mkilord.node.command.menu.Item;
import ru.mkilord.node.command.menu.Menu;
import ru.mkilord.node.model.Role;
import ru.mkilord.node.service.ProducerService;
import ru.mkilord.node.util.TextUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Random;

import static lombok.AccessLevel.PRIVATE;
import static ru.mkilord.node.command.Step.*;


@FieldDefaults(level = PRIVATE, makeFinal = true)
@Slf4j
@Component
@AllArgsConstructor
public class BotController implements CommandCatalog {

    CommandHandler commandHandler;
    ProducerService producerService;

    @PostConstruct
    public void init() {
        commandHandler.registerCommands(this,
                context -> send(context, """
                        ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!\s
                        –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help. üìò"""));
    }

    public void onMessageReceived(Update update) {
        commandHandler.process(update);
    }

    public void onCallbackQueryReceived(Update update) {
        commandHandler.process(update);
    }

    private void send(MessageContext context, String message) {
        var outMsg = SendMessage.builder().chatId(context.getChatId()).text(message).build();
        producerService.produceAnswer(outMsg);
    }

    private void send(MessageContext context, String message, InlineKeyboardMarkup keyboardMarkup) {
        var outMsg = SendMessage.builder().chatId(context.getChatId()).text(message).replyMarkup(keyboardMarkup).build();
        producerService.produceAnswer(outMsg);
    }

    /*USER - –ø—Ä–æ—Å—Ç–æ –ª—é–±–æ–π —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
     *   /start - –≤—ã–≤–æ–¥–∏—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
     *   /register - –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞.
     *   /help - –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
     *
     *MEMBER - —ç—Ç–æ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∫–ª—É–±–∞–º–∏.
     *  /profile
     *  */

    private void addCommands(List<Command> list, Command... commands) {
        list.addAll(List.of(commands));
    }

    @Override
    public List<Command> setCommands() {
        //Common Inputs:
        var usernameInput = Reply.builder()
                .preview(context -> send(context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. ‚úçÔ∏è"))
                .action(context -> {
                    var msg = context.getText();
                    if (msg.isBlank() || !msg.contains(" ")) {
                        send(context, "‚ùó –í–≤–µ–¥–∏—Ç–µ –§–ò–û (–∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.");
                        return REPEAT;
                    }
                    String[] fullName = msg.split(" ");
                    if (fullName.length < 3) {
                        send(context, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ).");
                        return REPEAT;
                    }
                    context.put("firstName", fullName[0]);
                    context.put("lastName", fullName[1]);
                    context.put("middleName", fullName[2]);
                    return NEXT;
                });
        var emailInput = Reply.builder()
                .preview(context -> send(context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π email. üìß"))
                .action(context -> {
                    context.put("email", context.getText());
                    return NEXT;
                });
        var phoneInput = Reply.builder()
                .preview(context -> send(context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω. üì±"))
                .action(context -> {
                    var msg = context.getText();
                    if (!TextUtils.isProneNumber(msg)) {
                        send(context, "‚ùó –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"79106790783\".");
                        return REPEAT;
                    }
                    context.put("phone", msg);
                    return NEXT;
                });
        var inputRate = Reply.builder()
                .preview(context -> send(context, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10!"))
                .action(context -> {
                    var msg = context.getText();
                    if (!TextUtils.isRange(msg, 0, 10)) {
                        send(context, "‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10!");
                        return REPEAT;
                    }
                    context.put("rate", msg);
                    return NEXT;
                });
        var inputClubName = Reply.builder().preview(context -> send(context, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞."))
                .action(context -> {
                    var msg = context.getText();
                    if (msg.isBlank() || msg.length() < 2) {
                        send(context, "‚ùó –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª—É–±–∞ –¥–ª–∏–Ω–Ω–µ–µ 2—Ö —Å–∏–º–≤–æ–ª–æ–≤!");
                        return REPEAT;
                    }
                    context.put("clubName", msg);
                    return NEXT;
                });
        var inputClubDescription = Reply.builder().preview(context -> send(context, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª—É–±–∞."))
                .action(context -> {
                    var msg = context.getText();
                    if (msg.isBlank() || msg.length() < 20) {
                        send(context, "‚ùó –í–≤–µ–¥–∏—Ç–µ –û–ø–∏—Å–∞–Ω–∏–µ –∫–ª—É–±–∞ 20—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤!");
                        return REPEAT;
                    }
                    context.put("clubDescription", msg);
                    return NEXT;
                });
        var inputSelectClub = Reply.builder()
                .preview(context -> {
                    var clubs = new ArrayList<>(List.of("–ù–µ–º–µ—Ü–∫–∏–π", "–†—É—Å—Å–∫–∏–π", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"));
                    // –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—É–±–∞—Ö
                    var items = clubs.stream().map(string -> new Item(string, string)).toList();
                    var menu = Menu.builder()
                            .items(items)
                            .build();
                    send(context, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±", menu.showMenu());
                }).action(context -> {
                    var club = context.getText();
                    context.put("club", club);
                    send(context, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª—É–±: " + club);
                    return NEXT;
                });
        var commands = new ArrayList<Command>();

        var helpMenu = Menu.builder().items(new Item("/help", "–ö–æ–º–∞–Ω–¥—ã")).build();
        //UnregisterCommands
        addCommands(commands,
                Command.create("/start")
                        .access(Role.USER)
                        .help("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
                        .action((context -> {
                            send(context, """
                                    üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö –∫–ª—É–±–æ–≤.
                                    
                                    –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
                                    
                                    - üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á–∏ –∫–ª—É–±–æ–≤.
                                    - ‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.
                                    - üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö –∫–ª—É–±–æ–≤.
                                    
                                    –î–ª—è –Ω–∞—á–∞–ª–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.
                                    
                                    üìò –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –∏—Å–ø–æ–ª—å–∑—É–π /help.
                                    """);
                        })).build(),
                Command.create("/register")
                        .help("–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
                        .action(context -> {
                            send(context, "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! üòä");
                        })
                        .input(usernameInput/*, phoneInput, emailInput*/)
                        .post(context -> {
                            var firstName = context.getValue("firstName");
                            var lastName = context.getValue("lastName");
                            var middleName = context.getValue("middleName");
                            var email = context.getValue("email");
                            var phone = context.getValue("phone");
                            send(context, """
                                    ‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã!
                                    
                                    –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
                                    üìõ –§–ò–û: %s %s %s
                                    üì± –¢–µ–ª–µ—Ñ–æ–Ω: %s
                                    üìß Email: %s""".formatted(firstName, lastName, middleName, phone, email));
                            send(context, "‚ÑπÔ∏è –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π /help\n–∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! ü§ñ", helpMenu.showMenu());
                            context.setUserRole(Role.MEMBER.toString());
                        }).build());


        //Member Commands
        var clubMenu = Menu.builder()
                .items(new Item("–í—Å—Ç—Ä–µ—á–∏", context -> {
                    //–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏.
                    var meets = new ArrayList<>(List.of("20.11.2024 18:00", "24.11.2024 12:20"));
                    var items = meets.stream().map(string -> new Item(string, string)).toList();
                    var menu = Menu.builder()
                            .items(items)
                            .build();
                    send(context, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏: ", menu.showMenu());
                    return NEXT;
                }), new Item("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", context -> {
                    //–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –Ω–∞ –∫–ª—É–±.
                    send(context, "–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!");
                    return TERMINATE;
                }), new Item("–û –∫–ª—É–±–µ", context -> {
                    //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—É–±–µ.
                    send(context, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ: " + context.getValue("club"));
                    return TERMINATE;
                }))
                .build();

        var clubsCommand = Command.create("/clubs")
                .access(Role.MEMBER)
                .help("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É, –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—É–±–µ.")
                .input(inputSelectClub)
                .input(Reply.builder().preview(context -> {
                    var club = context.getValue("club");
                    send(context, club + " –∫–ª—É–±:", clubMenu.showMenu());
                }).action(clubMenu::onClick))
                .input(context -> {
                    //–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É
                    send(context, "–û—Ç–º–µ—Ç–∏–ª —á—Ç–æ —Ç—ã –ø—Ä–∏–¥—ë—à—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É. " + context.getText());
                    return TERMINATE;
                })
                .build();

        var feedback = Command.create("/feedback")
                .help("–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å.")
                .access(Role.MEMBER)
                .action(context -> {
                    send(context, "–ü–æ–∏—Å–∫ –æ–ø—Ä–æ—Å–æ–≤!");
                    //–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–∞—Ö.
                    var isOk = new Random().nextBoolean();
                    if (isOk) {
                        return NEXT;
                    }
                    send(context, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
                    return TERMINATE;
                })
                .input(inputRate)
                .post(context -> {
                    var rate = context.getValue("rate");
                    send(context, "–û—Ü–µ–Ω–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞: " + rate);
                }).build();

        var profileMenu = Menu.builder()
                .items(new Item("/edit_profile", "–ò–∑–º–µ–Ω–∏—Ç—å"))
                .build();
        var profile = Command.create("/profile")
                .help("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ.")
                .access(Role.MEMBER_AND_EMPLOYEES)
                .action(context -> {
                    send(context, "–¢–≤–æ—è —Ä–æ–ª—å: %s".formatted(context.getUserRole()));
                    var firstName = context.getValue("firstName");
                    var lastName = context.getValue("lastName");
                    var middleName = context.getValue("middleName");
                    var email = context.getValue("email");
                    var phone = context.getValue("phone");
                    send(context, """
                            –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
                            üìõ –§–ò–û: %s %s %s
                            üì± –¢–µ–ª–µ—Ñ–æ–Ω: %s
                            üìß Email: %s""".formatted(firstName, lastName, middleName, phone, email), profileMenu.showMenu());
                }).build();
        var editProfile = Command.create("/edit_profile")
                .access(Role.MEMBER_AND_EMPLOYEES)
                .action(context -> {
                    send(context, "–ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –≤–Ω–æ–≤—å!");
                })
                .input(usernameInput, phoneInput, emailInput)
                .post(context -> send(context, "‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã!")).build();

        // TODO 2024-12-24 13:53: —É–±—Ä–∞—Ç—å –ø—Ä–∏ —Ä–µ–ª–∏–∑–µ
        var debugMenu = Menu.builder().items(
                new Item("–ü–æ–ª—É—á–∏—Ç—å –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", context -> {
                    context.setUserRole(Role.MODERATOR.toString());
                    return TERMINATE;
                }),
                new Item("–ü–æ–ª—É—á–∏—Ç—å –£—á–∞—Å—Ç–Ω–∏–∫–∞", context -> {
                    context.setUserRole(Role.MEMBER.toString());
                    return TERMINATE;
                }),
                new Item("–ü–æ–ª—É—á–∏—Ç—å –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", context -> {
                    context.setUserRole(Role.ORGANIZER.toString());
                    return TERMINATE;
                })
        ).build();

        // TODO 2024-12-24 13:53: —É–±—Ä–∞—Ç—å –ø—Ä–∏ —Ä–µ–ª–∏–∑–µ
        var debug = Command.create("/debug").access(Role.ALL).action(context -> {
            send(context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:", debugMenu.showMenu());
        }).input(debugMenu::onClick).build();

        var createClub = Command.create("/create_club").access(Role.MEMBER)
                .input(inputClubName, inputClubDescription)
                .input(Reply.builder().preview(context -> {
                            var clubName = context.getValue("clubName");
                            var clubDescription = context.getValue("clubDescription");
                            send(context, """
                                    –ö–ª—É–±:%s
                                    –û –∫–ª—É–±–µ:
                                    %s
                                    """.formatted(clubName, clubDescription));
                            send(context, "–ö–ª—É–± —Å–æ–∑–¥–∞–Ω!");
                        })
                ).build();

//        var clubsControlMenu = Menu.builder().items(new Item(""))

        var controlClubs = Command.create("/control_clubs").access(Role.USER)
                .input(inputSelectClub)
                .input(context -> {
                    var club = context.getValue("club");
                    //–£–¥–∞–ª–∏—Ç—å. –ò–∑–º–µ–Ω–∏—Ç—å.

                }).build();


        addCommands(commands, createClub, debug, clubsCommand, feedback, profile, editProfile);
        var help = Command.create("/help")
                .access(Role.ALL)
                .action(context -> {
                    var strBuilder = new StringBuilder();
                    commands.stream()
                            .filter(command ->
                                    (command.getRoles().contains(context.getUserRole()))
                                            && Objects.nonNull(command.getInfo()))
                            .forEach(command -> strBuilder
                                    .append(" - ")
                                    .append(command.getName())
                                    .append(" - ")
                                    .append(command.getInfo())
                                    .append("\n"));
                    var outMsg = "üìò –ö–æ–º–∞–Ω–¥—ã:\n\n";
                    if (strBuilder.isEmpty()) {
                        outMsg = "–ü–æ–∫–∞ —á—Ç–æ –¥–ª—è –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥!";
                    } else {
                        outMsg += strBuilder.toString();
                    }
                    send(context, outMsg);
                    return TERMINATE;
                }).build();

        addCommands(commands, help);
        return commands;
    }
}
