package ru.mkilord.node.controller;

import jakarta.annotation.PostConstruct;
import lombok.AllArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import ru.mkilord.node.command.*;
import ru.mkilord.node.command.menu.Item;
import ru.mkilord.node.command.menu.Menu;
import ru.mkilord.node.model.Club;
import ru.mkilord.node.model.Meet;
import ru.mkilord.node.model.enums.MeetStatus;
import ru.mkilord.node.model.enums.Role;
import ru.mkilord.node.service.ProducerService;
import ru.mkilord.node.service.impl.ClubService;
import ru.mkilord.node.service.impl.MeetService;
import ru.mkilord.node.service.impl.UserService;
import ru.mkilord.node.util.TextUtils;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.time.format.DateTimeParseException;
import java.util.*;
import java.util.function.Consumer;
import java.util.regex.Pattern;

import static lombok.AccessLevel.PRIVATE;
import static ru.mkilord.node.command.Step.*;
import static ru.mkilord.node.util.MeetFormatter.formatForItemWithStatus;
import static ru.mkilord.node.util.MeetFormatter.formatMeetWithOutStatus;


@FieldDefaults(level = PRIVATE, makeFinal = true)
@Slf4j
@Component
@AllArgsConstructor
public class BotController implements CommandCatalog {

    CommandHandler commandHandler;
    ProducerService producerService;

    UserService userService;
    ClubService clubService;
    MeetService meetService;

    @PostConstruct
    public void init() {
        commandHandler.registerCommands(this,
                context -> send(context, """
                        ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!\s
                        –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help. üìò"""));
    }

    public void onMessageReceived(Update update) {
        commandHandler.process(update);
    }

    public void onCallbackQueryReceived(Update update) {
        commandHandler.process(update);
    }

    private void send(MessageContext context, String message) {
        var outMsg = SendMessage.builder().chatId(context.getChatId()).text(message).build();
        producerService.produceAnswer(outMsg);
    }

    private void send(MessageContext context, String message, InlineKeyboardMarkup keyboardMarkup) {
        var outMsg = SendMessage.builder().chatId(context.getChatId()).text(message).replyMarkup(keyboardMarkup).build();
        producerService.produceAnswer(outMsg);
    }

    /*USER - –ø—Ä–æ—Å—Ç–æ –ª—é–±–æ–π —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
     *   /start - –≤—ã–≤–æ–¥–∏—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
     *   /register - –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞.
     *   /help - –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
     *
     *MEMBER - —ç—Ç–æ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∫–ª—É–±–∞–º–∏.
     *  /profile - –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *  /feedback - —Ç–µ–∫—É—â–∏–µ –æ–ø—Ä–æ—Å—ã.
     *  /meets - —Ç–µ–∫—É—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏.
     *  /clubs - –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–ª—É–±–æ–≤, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
     *
     *ORGANIZER - –≠—Ç–æ —Ç–æ—Ç –∫—Ç–æ —Å–æ–∑–¥–∞—ë—Ç –≤—Å—Ç—Ä–µ—á–∏. –ó–∞–∫—Ä–µ–ø–ª—ë–Ω –∑–∞ –∫–ª—É–±–æ–º.
     * /manage_clubs - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª—É–±–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç
     *      –ö: –°–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É. -> –¢–µ–º–∞ –≤—Å—Ç—Ä–µ—á–∏ -> –î–∞—Ç–∞ -> –í—Ä–µ–º—è. ?> –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
     * /control_meeting - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏.
     *      –í: –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É. (–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–ª—É–±–∞)
     *      –í: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.
     *      –í: –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω–æ–π. -> –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å.
     *      –í: –û—Ç–º–µ–Ω–∏—Ç—å.
     *      –í: –£–¥–∞–ª–∏—Ç—å.
     * /control_feedback - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –∫–ª—É–±–∞. –ò –æ—Ü–µ–Ω–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –≤—Å—Ç—Ä–µ—á.
     *MANAGER - –≠—Ç–æ —Ç–æ—Ç –∫—Ç–æ —Å–æ–∑–¥–∞—ë—Ç –∫–ª—É–±—ã. –ò –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç –∑–∞ –Ω–∏–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
     * /create_club - –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∫–ª—É–±.
     *  */

    /*–°–¥–µ–ª–∞—Ç—å –æ—Ç–∑—ã–≤—ã
     * –°–¥–µ–ª–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞.
     * –°–¥–µ–ª–∞—Ç—å –∫–ª—É–±—ã:
     *   –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—É–±*/


    private void addCommands(List<Command> list, Command... commands) {
        list.addAll(List.of(commands));
    }

    @Override
    public List<Command> setCommands() {
        //Common Inputs:
        var usernameInput = Reply.builder()
                .preview((Consumer<MessageContext>)
                        context -> send(context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. ‚úçÔ∏è"))
                .action(context -> {
                    var msg = context.getText();
                    if (msg.isBlank() || !msg.contains(" ")) {
                        send(context, "‚ùó –í–≤–µ–¥–∏—Ç–µ –§–ò–û (–∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.");
                        return REPEAT;
                    }
                    String[] fullName = msg.split(" ");
                    if (fullName.length < 3) {
                        send(context, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ).");
                        return REPEAT;
                    }
                    context.put("firstName", fullName[0]);
                    context.put("lastName", fullName[1]);
                    context.put("middleName", fullName[2]);
                    return NEXT;
                });
        var emailInput = Reply.builder()
                .preview((Consumer<MessageContext>)
                        context -> send(context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π email. üìß"))
                .action(context -> {
                    var email = context.getText();

                    var emailRegex = "^[A-Za-z0-9+_.-]+@(.+)$";
                    var pattern = Pattern.compile(emailRegex);

                    if (email == null || !pattern.matcher(email).matches()) {
                        send(context, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.");
                        return REPEAT;
                    }
                    context.put("email", email);
                    return NEXT;
                });
        var phoneInput = Reply.builder()
                .preview((Consumer<MessageContext>)
                        context -> send(context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω. üì±"))
                .action(context -> {
                    var msg = context.getText();
                    if (!TextUtils.isProneNumber(msg)) {
                        send(context, "‚ùó –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"79106790783\".");
                        return REPEAT;
                    }
                    context.put("phone", msg);
                    return NEXT;
                });
        var inputRate = Reply.builder()
                .preview((Consumer<MessageContext>)
                        context -> send(context, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10!"))
                .action(context -> {
                    var msg = context.getText();
                    if (!TextUtils.isRange(msg, 0, 10)) {
                        send(context, "‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10!");
                        return REPEAT;
                    }
                    context.put("rate", msg);
                    return NEXT;
                });
        var inputClubName = Reply.builder().preview((Consumer<MessageContext>)
                        context -> send(context, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞."))
                .action(context -> {
                    var msg = context.getText();
                    if (msg.isBlank() || msg.length() < 2) {
                        send(context, "‚ùó –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª—É–±–∞ –¥–ª–∏–Ω–Ω–µ–µ 2—Ö —Å–∏–º–≤–æ–ª–æ–≤!");
                        return REPEAT;
                    }
                    context.put("clubName", msg);
                    return NEXT;
                });
        var inputClubDescription = Reply.builder().preview((Consumer<MessageContext>)
                        context -> send(context, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª—É–±–∞."))
                .action(context -> {
                    var msg = context.getText();
                    if (msg.isBlank() || msg.length() < 20) {
                        send(context, "‚ùó –í–≤–µ–¥–∏—Ç–µ –û–ø–∏—Å–∞–Ω–∏–µ –∫–ª—É–±–∞ 20—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤!");
                        return REPEAT;
                    }
                    context.put("clubDescription", msg);
                    return NEXT;
                });

        var inputSelectClub = Reply.builder()
                .preview(context -> {
                    var clubs = new ArrayList<>(clubService.getAll());
                    var items = clubs.stream()
                            .map(club -> new Item(String.valueOf(club.getId()), club.getName()))
                            .toList();
                    if (items.isEmpty()) {
                        send(context, "–ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—É–±–æ–≤!");
                        return TERMINATE;
                    }
                    var menu = Menu.builder()
                            .items(items)
                            .build();
                    context.put("clubs", clubs);
                    send(context, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±:", menu.showMenu(context));
                    return NEXT;
                })
                .action(context -> {
                    if (Menu.isInvalidInput(context)) return INVALID;

                    var clubId = Long.parseLong(context.getText());
                    var clubs = context.getValues("clubs", Club.class);

                    clubs.stream()
                            .filter(club -> club.getId() == clubId)
                            .findFirst()
                            .ifPresentOrElse(club -> context.put("club", club),
                                    () -> send(context, "–ö–ª—É–± –Ω–µ –Ω–∞–π–¥–µ–Ω"));
                    return NEXT;
                });

        var commands = new ArrayList<Command>();

        var helpMenu = Menu.builder().items(new Item("/help", "–ö–æ–º–∞–Ω–¥—ã")).build();
        /*USER - –ø—Ä–æ—Å—Ç–æ –ª—é–±–æ–π —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
         *   /start - –≤—ã–≤–æ–¥–∏—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
         *   /register - –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞.
         *   /help - –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
         */
        var startCommand = Command.create("/start")
                .access(Role.USER)
                .help("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
                .action((context -> {
                    send(context, """
                            üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö –∫–ª—É–±–æ–≤.
                            
                            –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
                            
                            - üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á–∏ –∫–ª—É–±–æ–≤.
                            - ‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.
                            - üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö –∫–ª—É–±–æ–≤.
                            
                            –î–ª—è –Ω–∞—á–∞–ª–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.
                            
                            üìò –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –∏—Å–ø–æ–ª—å–∑—É–π /help.
                            """);
                })).build();

        var registerCommand = Command.create("/register")
                .help("–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
                .action(context -> {
                    send(context, "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! üòä");
                })
                .input(usernameInput, phoneInput, emailInput)
                .post(context -> {
                    var user = context.getUser();
                    user.setFirstName(context.getValue("firstName"));
                    user.setLastName(context.getValue("lastName"));
                    user.setMiddleName(context.getValue("middleName"));
                    user.setEmail(context.getValue("email"));
                    user.setPhone(context.getValue("phone"));
                    user.setRole(Role.MEMBER);
                    context.setUser(user);
                    userService.update(user);
                    send(context, """
                            ‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã!
                            
                            –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
                            üìõ –§–ò–û: %s %s %s
                            üì± –¢–µ–ª–µ—Ñ–æ–Ω: %s
                            üìß Email: %s""".formatted(user.getFirstName(), user.getLastName(), user.getMiddleName(),
                            user.getPhone(), user.getEmail()));
                    send(context, "‚ÑπÔ∏è –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π /help\n–∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! ü§ñ",
                            helpMenu.showMenu(context));
                }).build();

        /*ALL - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
         *   /help - –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
         */
        var help = Command.create("/help")
                .access(Role.ALL)
                .action(context -> {
                    var strBuilder = new StringBuilder();
                    var userRole = context.getUser().getRole();
                    commands.stream()
                            .filter(command ->
                                    (command.getRoles().contains(userRole.toString()))
                                            && Objects.nonNull(command.getInfo()))
                            .forEach(command -> strBuilder
                                    .append(" - ")
                                    .append(command.getName())
                                    .append(" - ")
                                    .append(command.getInfo())
                                    .append("\n"));
                    var outMsg = "üìò –ö–æ–º–∞–Ω–¥—ã:\n\n";
                    if (strBuilder.isEmpty()) {
                        outMsg = "–ü–æ–∫–∞ —á—Ç–æ –¥–ª—è –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥!";
                    } else {
                        outMsg += strBuilder.toString();
                    }
                    send(context, outMsg);
                    return TERMINATE;
                }).build();
        var profileMenu = Menu.builder()
                .items(new Item("/edit_profile", "–ò–∑–º–µ–Ω–∏—Ç—å"))
                .build();

        /*MEMBER_AND_EMPLOYEES - –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
         *   /profile - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ.
         *   /edit_profile - –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.
         *   /delete_account - —É–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
         */

        var profile = Command.create("/profile")
                .help("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ.")
                .access(Role.MEMBER_AND_EMPLOYEES)
                .action(context -> {
                    var user = context.getUser();
                    send(context, """
                            –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
                            üìõ –§–ò–û: %s %s %s
                            üì± –¢–µ–ª–µ—Ñ–æ–Ω: %s
                            üìß Email: %s""".formatted(user.getFirstName(), user.getLastName(),
                            user.getMiddleName(), user.getPhone(), user.getEmail()), profileMenu.showMenu(context));
                }).build();

        var editProfile = Command.create("/edit_profile")
                .access(Role.MEMBER_AND_EMPLOYEES)
                .action(context -> {
                    send(context, "–ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –≤–Ω–æ–≤—å!");
                })
                .input(usernameInput, phoneInput, emailInput)
                .post(context -> {
                    var user = context.getUser();
                    user.setFirstName(context.getValue("firstName"));
                    user.setLastName(context.getValue("lastName"));
                    user.setMiddleName(context.getValue("middleName"));
                    user.setEmail(context.getValue("email"));
                    user.setPhone(context.getValue("phone"));
                    context.setUser(user);
                    userService.update(user);
                    send(context, "‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã!");
                }).build();

        var deleteUserCommand = Command.create("/delete_account")
                .help("–£–¥–∞–ª—è–µ—Ç —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤—Å–µ–≥–¥–∞.")
                .access(Role.MEMBER_AND_EMPLOYEES)
                .input(Reply.builder().preview(context -> {
                            var dialogMenu = Menu.builder().items(
                                    new Item("–î–∞", _ -> {
                                        userService.deleteById(context.getUser().getTelegramId());
                                        send(context, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã! üëã");
                                        send(context, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞!");
                                        commandHandler.disposeContext(context);
                                        return TERMINATE;
                                    }),
                                    new Item("–ù–µ—Ç", _ -> {
                                        send(context, "–ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ üòä" +
                                                "\n\uD83D\uDCD8 –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞!");
                                        return TERMINATE;
                                    })
                            ).build();
                            send(context, "üöÆ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?", dialogMenu.showMenu(context));
                        })
                        .action(context -> context.getMenu().onClick(context)
                        )).build();

        /* MEMBER - —ç—Ç–æ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∫–ª—É–±–∞–º–∏.
         *  /clubs - –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–ª—É–±–æ–≤, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
         *  /meets - —Ç–µ–∫—É—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏.
         *  /feedback - —Ç–µ–∫—É—â–∏–µ –æ–ø—Ä–æ—Å—ã.
         */

        var clubsCommand = Command.create("/clubs")
                .access(Role.MEMBER)
                .help("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É, –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—É–±–µ.")
                .input(inputSelectClub)
                .input(Reply.builder().preview(context -> {
                            var club = context.getValue("club", Club.class);
                            var isUserSubscribed = userService.isUserSubscribeToClub(context.getUser().getTelegramId(), club.getId());
                            var items = new ArrayList<Item>();
                            items.add(new Item("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", _ -> {
                                var meets = meetService.getPublishedMeetsByClubId(club.getId());
                                if (meets.isEmpty()) {
                                    send(context, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á!");
                                    return TERMINATE;
                                }
                                var itemsMeets = meets.stream()
                                        .map(meet -> new Item(String.valueOf(meet.getId()), formatMeetWithOutStatus(meet))).toList();
                                var menu = Menu.builder()
                                        .items(itemsMeets)
                                        .build();
                                send(context, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏: ", menu.showMenu(context));
                                return NEXT;
                            }));
                            if (isUserSubscribed) {
                                items.add(new Item("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", _ -> {
                                    clubService.removeSubscriber(club.getId(), context.getUser());
                                    send(context, "üì¥ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å! \n –¢–µ–ø–µ—Ä—å –Ω–∏–∫–∞–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç —ç—Ç–æ–≥–æ –∫–ª—É–±–∞!");
                                    return TERMINATE;
                                }));
                            } else {
                                items.add(new Item("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", _ -> {
                                    clubService.addSubscriber(club.getId(), context.getUser());
                                    send(context, "\uD83D\uDFE2 –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! \n\n\uD83D\uDCDD –¢–µ–ø–µ—Ä—å –∫–æ–≥–¥–∞ –∫–ª—É–± –æ–ø—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É, –º—ã –ø—Ä–∏—à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!");
                                    send(context, "\uD83D\uDCD8 –ò—Å–ø–æ–ª—å–∑—É–π /clubs —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–ª—É–± –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É.");
                                    return TERMINATE;
                                }));
                            }
                            items.add(new Item("–û –∫–ª—É–±–µ", _ -> {
                                send(context, "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ:\n\n"
                                        + club.getName() + "\n\n"
                                        + club.getDescription() +
                                        "\n\n\uD83D\uDCD8 –ò—Å–ø–æ–ª—å–∑—É–π /clubs —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–ª—É–± –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É.");
                                return TERMINATE;
                            }));

                            var menu = Menu.builder()
                                    .items(items)
                                    .build();
                            send(context, club.getName() + " –∫–ª—É–±:", menu.showMenu(context));

                        })
                        .action(context -> context.getMenu().onClick(context)))
                .input(context -> {
                    if (Menu.isInvalidInput(context)) return INVALID;
                    var meetId = context.getText();
                    meetService.addUserToMeet(Long.valueOf(meetId), context.getUser());
                    send(context, "‚úîÔ∏è –û—Ç–º–µ—Ç–∏–ª —á—Ç–æ —Ç—ã –ø—Ä–∏–¥—ë—à—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É.\n\n\uD83D\uDCD8 –ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –≤—Å—Ç—Ä–µ—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π /meets");
                    return TERMINATE;
                })
                .build();

        var meetsCommand = Command.create("/meets")
                .help("–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏.")
                .access(Role.MEMBER)
                .input(Reply.builder().preview(context -> {
                            var meets = userService.getRegisteredMeetsWithStatus(context.getUser().getTelegramId(), MeetStatus.PUBLISHED);
                            if (meets.isEmpty()) {
                                send(context, "–£ —Ç–µ–±—è –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á!\n\uD83D\uDCD8 –ò—Å–ø–æ–ª—å–∑—É–π /clubs, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É!");
                                return TERMINATE;
                            }
                            var items = meets.stream().map(meet -> new Item(String.valueOf(meet.getId()), formatForItemWithStatus(meet))).toList();
                            var menu = Menu.builder()
                                    .items(items)
                                    .build();
                            context.put("meets", meets);
                            send(context, "–í–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏: ", menu.showMenu(context));
                            return NEXT;
                        })
                        .action(context -> {
                            if (Menu.isInvalidInput(context)) return INVALID;
                            var meets = context.getValues("meets", Meet.class);
                            var meetId = Long.parseLong(context.getText());
                            meets.stream()
                                    .filter(meet -> meet.getId() == meetId)
                                    .findFirst()
                                    .ifPresentOrElse(meet -> context.put("meet", meet),
                                            () -> send(context, "–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"));
                            return NEXT;
                        }))
                .input(Reply.builder().preview(context -> {
                            var meet = context.getValue("meet", Meet.class);
                            var items = new ArrayList<Item>();
                            if (meet.getStatus() == MeetStatus.PUBLISHED) {
                                items.add(new Item("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", _ -> {
                                    meetService.removeUserFromMeet(meet.getId(), context.getUser());
                                    send(context, "–û—Ç–º–µ–Ω–∏–ª —Ç–≤–æ—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\uD83D\uDCD8 –ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –≤—Å—Ç—Ä–µ—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π /meets");
                                    return TERMINATE;
                                }));
                            }
                            var menu = Menu.builder()
                                    .items(items)
                                    .build();
                            send(context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—Å—Ç—Ä–µ—á–∏:\n\n" + formatForItemWithStatus(meet), menu.showMenu(context));
                            return NEXT;
                        })
                        .action(context -> context.getMenu().onClick(context)))
                .build();

        var feedback = Command.create("/feedback")
                .help("–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å.")
                .access(Role.MEMBER)
                .action(context -> {
                    send(context, "–ü–æ–∏—Å–∫ –æ–ø—Ä–æ—Å–æ–≤!");
                    //–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–∞—Ö.
                    var isOk = new Random().nextBoolean();
                    if (isOk) return NEXT;
                    send(context, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
                    return TERMINATE;
                })
                .input(inputRate)
                .post(context -> {
                    var rate = context.getValue("rate");
                    send(context, "–û—Ü–µ–Ω–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞: " + rate);
                }).build();

        /* ORGANIZER - –≠—Ç–æ —Ç–æ—Ç –∫—Ç–æ —Å–æ–∑–¥–∞—ë—Ç –≤—Å—Ç—Ä–µ—á–∏. –ó–∞–∫—Ä–µ–ø–ª—ë–Ω –∑–∞ –∫–ª—É–±–æ–º.
         * /control_meeting - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª—É–±–æ–≤
         *
         *      –í: –í—Å—Ç—Ä–µ—á–∏ -> –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å–æ –≤—Å—Ç—Ä–µ—á–∞–º–∏.
         *          –í*: –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.
         *          –í: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.
         *          –í*: –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω–æ–π. ?> –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å.
         *          –í*: –û—Ç–º–µ–Ω–∏—Ç—å.
         *          –í*: –£–¥–∞–ª–∏—Ç—å.
         * /create_meeting - –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É.
         *      –ö: –°–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É. -> –¢–µ–º–∞ –≤—Å—Ç—Ä–µ—á–∏ -> –î–∞—Ç–∞ -> –í—Ä–µ–º—è. ?> –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
         */

        var inputMeetName = Reply.builder().preview((Consumer<MessageContext>) context ->
                        send(context, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –≤—Å—Ç—Ä–µ—á–∏:"))
                .action(context -> {
                    var msg = context.getText();
                    if (msg.isBlank() || msg.length() < 20) {
                        send(context, "‚ùó –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –≤—Å—Ç—Ä–µ—á–∏ –æ—Ç 20-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤!");
                        return REPEAT;
                    }
                    context.put("meetName", msg);
                    return NEXT;
                });

        var inputMeetDate = Reply.builder().preview((Consumer<MessageContext>) context ->
                        send(context, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î:–ú–ú:–ì–ì–ì–ì"))
                .action(context -> {
                    var msg = context.getText();
                    try {
                        var formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
                        var date = LocalDate.parse(msg, formatter);
                        var now = LocalDate.now();
                        if (date.isBefore(now) || date.isAfter(now.plusMonths(1))) {
                            send(context, "‚ùó –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –¥–æ 1-–≥–æ –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä—ë–¥.");
                            return REPEAT;
                        }
                        context.put("meetDate", date.toString());
                        return NEXT;
                    } catch (DateTimeParseException e) {
                        send(context, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY.");
                        return REPEAT;
                    }
                });

        var inputMeetTime = Reply.builder().preview((Consumer<MessageContext>) context ->
                        send(context, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç):"))
                .action(context -> {
                    var msg = context.getText();
                    try {
                        var formatter = new DateTimeFormatterBuilder()
                                .appendPattern("[H:mm][HH:mm][H:m][HH:m]")
                                .toFormatter();
                        var time = LocalTime.parse(msg, formatter);

                        var meetDateStr = context.getValue("meetDate");
                        LocalDate meetDate = null;
                        if (meetDateStr != null) meetDate = LocalDate.parse(meetDateStr);


                        var now = LocalDateTime.now();
                        var start = LocalTime.of(8, 0);
                        var end = LocalTime.of(22, 0);

                        if (time.isBefore(start) || time.isAfter(end)) {
                            send(context, "‚ùó –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 08:00 –¥–æ 22:00!");
                            return REPEAT;
                        }

                        if (meetDate != null && meetDate.equals(LocalDate.now())) {
                            var todayTime = LocalDateTime.of(LocalDate.now(), time);
                            if (todayTime.isBefore(now)) {
                                send(context, "‚ùó –í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ.");
                                return REPEAT;
                            }
                        }
                        context.put("meetTime", time.toString());
                        return NEXT;
                    } catch (DateTimeParseException e) {
                        send(context, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, 8:30 –∏–ª–∏ 09:40.");
                        return REPEAT;
                    }
                });

        var organizerClubMenu = Menu.builder()
                .items(new Item("–°–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É", context -> {
                    send(context, "–°–æ–∑–¥–∞—é –≤—Å—Ç—Ä–µ—á—É");
                    return NEXT;
                }))
                .build();

        var createMeeting = Command.create("/create_meeting")
                .access(Role.MEMBER)
                .help("–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –∫–ª—É–±–æ–≤.")
                .input(inputSelectClub)
                .input(Reply.builder()
                        .preview(context -> {
                            var club = context.getValue("club", Club.class);
                            send(context, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª—É–±: " + club.getName(), organizerClubMenu.showMenu(context));
                        })
                        .action(organizerClubMenu::onClick))
                .input(inputMeetName, inputMeetDate, inputMeetTime)
                .input(Reply.builder().preview(context -> {
                            var meet = Meet.builder()
                                    .name(context.getValue("meetName"))
                                    .time(LocalTime.parse(context.getValue("meetTime")))
                                    .date(LocalDate.parse(context.getValue("meetDate")))
                                    .status(MeetStatus.HIDDEN)
                                    .build();
                            var club = context.getValue("club", Club.class);
                            meet.setClub(club);
                            meet = meetService.save(meet);
                            send(context, "–í—Å—Ç—Ä–µ—á–∞ —Å–æ–∑–¥–∞–Ω–∞!");
                            var finalMeet = meet;
                            var dialogMenu = Menu.builder().items(
                                    new Item("–î–∞", _ -> {
                                        meetService.publicMeetByIdWithNotification(finalMeet.getId());
                                        send(context, "–í—Å—Ç—Ä–µ—á–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!" +
                                                "\n\uD83D\uDCD8 –ò—Å–ø–æ–ª—å–∑—É–π /control_meeting –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–µ–π.");
                                        return TERMINATE;
                                    }),
                                    new Item("–ù–µ—Ç", _ -> {
                                        send(context, "–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞." +
                                                "\n\uD83D\uDCD8 –ò—Å–ø–æ–ª—å–∑—É–π /control_meeting –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–µ–π.");
                                        return TERMINATE;
                                    })
                            ).build();
                            send(context, "–•–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É?", dialogMenu.showMenu(context));
                            return NEXT;
                        })
                        .action(context -> context.getMenu().onClick(context))).build();

        var controlMeeting = Command.create("/control_meeting")
                .help("–ü–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å—Ç—Ä–µ—á–∞–º–∏ ")
                .access(Role.MEMBER)
                .input(inputSelectClub)
                .input(Reply.builder().preview(context -> {
                    var club = context.getValue("club", Club.class);
                    var meets = meetService.getMeetsByClubIdAndStatus(club.getId(), Set.of(MeetStatus.PUBLISHED, MeetStatus.HIDDEN));
                    if (meets.isEmpty()) {
                        send(context, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á! \n\uD83D\uDCD8 –ò—Å–ø–æ–ª—å–∑—É–π /create_meeting —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É.");
                        return TERMINATE;
                    }
                    var items = meets.stream().map(meet -> new Item(String.valueOf(meet.getId()), formatForItemWithStatus(meet))).toList();
                    var menu = Menu.builder()
                            .items(items)
                            .build();
                    send(context, "–í—Å—Ç—Ä–µ—á–∏ –∫–ª—É–±–∞: " + club.getName(), menu.showMenu(context));
                    return NEXT;
                }))
                .input(Reply.builder().preview(context -> {
                            if (Menu.isInvalidInput(context)) return INVALID;

                            var meetId = Long.parseLong(context.getText());
                            var meetOpt = meetService.getMeetById(meetId);

                            if (meetOpt.isEmpty()) {
                                send(context, "–î–∞–Ω–Ω—ã–µ –æ –≤—Å—Ç—Ä–µ—á–µ —É—Å—Ç–∞—Ä–µ–ª–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!");
                                return TERMINATE;
                            }
                            var meet = meetOpt.get();

                            var items = new ArrayList<Item>();

                            if (meet.getStatus() == MeetStatus.HIDDEN) {
                                items.add(new Item("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", _ -> {
                                    meetService.publicMeetByIdWithNotification(meet.getId());
                                    send(context, "–í—Å—Ç—Ä–µ—á–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞! \n\uD83D\uDCD8 –ò—Å–ø–æ–ª—å–∑—É–π /control_meeting —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å—Ç—Ä–µ—á–∞–º–∏");
                                    return TERMINATE;
                                }));
                                items.add(new Item("–£–¥–∞–ª–∏—Ç—å", _ -> {
                                    var isDelete = meetService.deleteMeetById(meet.getId());
                                    if (isDelete)
                                        send(context, "–í—Å—Ç—Ä–µ—á–∞ —É–¥–∞–ª–µ–Ω–∞! \n\uD83D\uDCD8 –ò—Å–ø–æ–ª—å–∑—É–π /control_meeting —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å—Ç—Ä–µ—á–∞–º–∏");
                                    else
                                        send(context, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É.");
                                    return TERMINATE;
                                }));
                            }
                            if (meet.getStatus() == MeetStatus.PUBLISHED) {
                                items.add(new Item("–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω–æ–π", _ -> {
                                    meetService.updateMeetStatus(meet.getId(), MeetStatus.COMPLETED)
                                            .ifPresentOrElse(_ -> send(context, "–û—Ç–º–µ—Ç–∏–ª –≤—Å—Ç—Ä–µ—á—É –∫–∞–∫ –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—É—é! " +
                                                            "\n\uD83D\uDCD8 –ò—Å–ø–æ–ª—å–∑—É–π /control_meeting —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å—Ç—Ä–µ—á–∞–º–∏"),
                                                    () -> send(context, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"));
                                    return NEXT;
                                }));
                                items.add(new Item("–û—Ç–º–µ–Ω–∏—Ç—å", _ -> {
                                    meetService.cancelMeetByIdWithNotification(meet.getId())
                                            .ifPresentOrElse(_ -> send(context, "–û—Ç–º–µ–Ω–∏–ª –≤—Å—Ç—Ä–µ—á—É! " +
                                                            "\n\uD83D\uDCD8 –ò—Å–ø–æ–ª—å–∑—É–π /control_meeting —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å—Ç—Ä–µ—á–∞–º–∏"),
                                                    () -> send(context, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"));
                                    meetService.deleteMeetById(meet.getId());
                                    return TERMINATE;
                                }));
                            }
                            items.add(new Item("–£—á–∞—Å—Ç–Ω–∏–∫–∏", _ -> {
                                meetService.getMeetWithRegisteredUsersById(meet.getId()).ifPresentOrElse(meet1 -> {
                                    var users = meet1.getRegisteredUsers();
                                    if (users.isEmpty()) {
                                        send(context, "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏–µ—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
                                        send(context, "\n\uD83D\uDCD8 –ò—Å–ø–æ–ª—å–∑—É–π /control_meeting —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å—Ç—Ä–µ—á–∞–º–∏");
                                        return;
                                    }
                                    var outStrBuilder = new StringBuilder("–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n");
                                    users.forEach(u -> outStrBuilder.append(u.getFirstName()).append(" ").append(u.getLastName()).append("\n"));
                                    outStrBuilder.append("–í—Å–µ–≥–æ: ").append(users.size());

                                    send(context, outStrBuilder.toString());
                                    send(context, "\n\uD83D\uDCD8 –ò—Å–ø–æ–ª—å–∑—É–π /control_meeting —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å—Ç—Ä–µ—á–∞–º–∏");

                                }, () -> send(context, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"));
                                return TERMINATE;
                            }));
                            var menu = Menu.builder()
                                    .items(items)
                                    .build();
                            send(context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—Å—Ç—Ä–µ—á–∏:\n\n" + meet.getName(), menu.showMenu(context));
                            return NEXT;
                        })
                        .action(context -> context.getMenu().onClick(context)))
                .build();

        /* MODERATOR - –≠—Ç–æ —Ç–æ—Ç –∫—Ç–æ —Å–æ–∑–¥–∞—ë—Ç –≤—Å—Ç—Ä–µ—á–∏. –ó–∞–∫—Ä–µ–ø–ª—ë–Ω –∑–∞ –∫–ª—É–±–æ–º.
         * /control_meeting - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª—É–±–æ–≤
         *      –ö: –°–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É. -> –¢–µ–º–∞ –≤—Å—Ç—Ä–µ—á–∏ -> –î–∞—Ç–∞ -> –í—Ä–µ–º—è. ?> –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
         *      –í: –í—Å—Ç—Ä–µ—á–∏ -> –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å–æ –≤—Å—Ç—Ä–µ—á–∞–º–∏.
         *          –í*: –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.
         *          –í: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.
         *          –í*: –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω–æ–π. ?> –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å.
         *          –í*: –û—Ç–º–µ–Ω–∏—Ç—å.
         *          –í*: –£–¥–∞–ª–∏—Ç—å.
         */

        var createClub = Command.create("/create_club").access(Role.MEMBER)
                .input(inputClubName, inputClubDescription)
                .help("–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—É–±.")
                .input(Reply.builder().preview(context -> {
                            var clubName = context.getValue("clubName");
                            var clubDescription = context.getValue("clubDescription");
                            send(context, """
                                    –ù–∞–∑–≤–∞–Ω–∏–µ: %s
                                    –û–ø–∏—Å–∞–Ω–∏–µ:
                                    %s
                                    """.formatted(clubName, clubDescription));
                            var club = Club.builder()
                                    .name(clubName)
                                    .description(clubDescription)
                                    .build();
                            clubService.save(club);
                            send(context, "–ö–ª—É–± —Å–æ–∑–¥–∞–Ω!\n\uD83D\uDCD8 –ò—Å–ø–æ–ª—å–∑—É–π /control_clubs —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª—É–±–∞–º–∏.");
                        })
                ).build();

        var controlClubs = Command.create("/control_clubs")
                .help("–ü–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª—É–±–∞–º–∏")
                .access(Role.MEMBER)
                .input(inputSelectClub)
                .input(Reply.builder().preview(context -> {
                            var club = context.getValue("club", Club.class);
                            var items = new ArrayList<Item>();
                            items.add(new Item("–£–¥–∞–ª–∏—Ç—å", _ -> {
                                var isDelete = clubService.deleteById(club.getId());
                                if (isDelete) {
                                    send(context, """
                                            –ö–ª—É–± —É–¥–∞–ª—ë–Ω!\
                                            
                                            
                                            \uD83D\uDCD8 –ò—Å–ø–æ–ª—å–∑—É–π /control_clubs —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª—É–±–∞–º–∏.""");
                                } else {
                                    send(context, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—É–±.");
                                }
                                return TERMINATE;
                            }));
                            items.add(new Item("–ò–∑–º–µ–Ω–∏—Ç—å", _ -> {
                                send(context, "–û—Ç–º–µ—Ç–∏–ª –≤—Å—Ç—Ä–µ—á—É –∫–∞–∫ –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—É—é! " +
                                        "\n\uD83D\uDCD8 –ò—Å–ø–æ–ª—å–∑—É–π /control_meeting —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å—Ç—Ä–µ—á–∞–º–∏");
                                return NEXT;
                            }));
                            var menu = Menu.builder()
                                    .items(items)
                                    .build();
                            send(context, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–ª—É–±–∞:\n\n" + club.getName(), menu.showMenu(context));
                            return NEXT;
                        })
                        .action(context -> context.getMenu().onClick(context)))
                .build();

        addCommands(commands, startCommand, registerCommand);
        addCommands(commands, clubsCommand, meetsCommand);
        addCommands(commands, createMeeting, controlMeeting);
        addCommands(commands, createClub, controlClubs);
        addCommands(commands, feedback);
        addCommands(commands, profile, editProfile, deleteUserCommand);
        addCommands(commands, help);

        return commands;
    }
}
