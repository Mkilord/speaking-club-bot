package ru.mkilord.node.service;

import jakarta.annotation.PostConstruct;
import lombok.AllArgsConstructor;
import lombok.experimental.FieldDefaults;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import ru.mkilord.node.TextUtils;
import ru.mkilord.node.common.command.*;

import java.util.*;

import static lombok.AccessLevel.PRIVATE;
import static ru.mkilord.node.common.command.Step.*;


@FieldDefaults(level = PRIVATE, makeFinal = true)
@Slf4j
@Component
@AllArgsConstructor
public class NodeTelegramBot implements CommandRepository {

    CommandHandler commandHandler;
    ProducerService producerService;

    @PostConstruct
    public void init() {
        commandHandler.registerCommands(this,
                context -> send(context, """
                        ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!\s
                        –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help. üìò"""));
    }

    public void onMessageReceived(Update update) {
        commandHandler.process(update);
    }

    public void onCallbackQueryReceived(Update update) {
        commandHandler.process(update);
    }

    public void send(MessageContext context, String message) {
        var outMsg = SendMessage.builder().chatId(context.getChatId()).text(message).build();
        producerService.produceAnswer(outMsg);
    }

    public void send(MessageContext context, InlineKeyboardMarkup keyboardMarkup) {
        var outMsg = SendMessage.builder().chatId(context.getChatId()).replyMarkup(keyboardMarkup).build();
        producerService.produceAnswer(outMsg);
    }

    public void send(MessageContext context, String message, InlineKeyboardMarkup keyboardMarkup) {
        var outMsg = SendMessage.builder().chatId(context.getChatId()).text(message).replyMarkup(keyboardMarkup).build();
        producerService.produceAnswer(outMsg);
    }

    // TODO 2024-12-20 13:03: –ß—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç —é–∑–µ—Ä–∞.
    // 1 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –µ—Å—Ç—å.
    // 2 –ø—Ä–æ—Ñ–∏–ª—å - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–º–∞–Ω–¥—É /profile –ø–æ—Ç–æ–º –µ–º—É
    //   –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /edit_profile, –∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ.
    // –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å—Ç—Ä–µ—á: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –µ–º—É –≤—Å—Ç—Ä–µ—á. –ó–∞—Ç–µ–º
    // –≤—ã–±–∏—Ä–∞–µ—Ç –Ω—É–∂–Ω—É—é –≤—Å—Ç—Ä–µ—á—É.
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∫–ª—É–±—ã.
    // 3 –∑–∞–ø–∏—Å—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–º–∞–Ω–¥—É –≤—Å—Ç—Ä–µ—á–∏, –∏ –µ–º—É –≤—ã–¥–∞—ë—Ç
    /*–£ –º–µ–Ω—è –µ—Å—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç. –ê —Ç–∞–∫ –∂–µ –∫–æ–º–∞–Ω–¥—ã –∫ –Ω–µ–º—É. –ü—Ä–∏ —ç—Ç–æ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–æ–º–∞–Ω–¥, —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
     * –ï—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ –∫–æ—Ç–æ—Ä–∞—è —Å–ª—É–∂–∏—Ç —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞, –∑–∞—Ç–µ–º –∫–æ–≥–¥–∞ —è –ø–æ–ª—É—á–∞—é –∫–æ–º–∞–Ω–¥—ã, –±–æ—Ç –≤—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º –ø–æ–ª—É—á–µ–Ω–∏—è –≤–≤–æ–¥–∞
     * –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏ —ç—Ç–æ–º, –±–æ—Ç –º–æ–∂–µ—Ç –∏ –Ω–µ –≤—Ö–æ–¥–∏—Ç—å –≤ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ, –≤–≤–æ–¥–∞ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ.
     * –¢–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω—ã –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞.
     * –¢–µ–ø–µ—Ä—å —Å–∞–º —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç. –¢–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö –∫–ª—É–±–æ–≤.
     * –ò –≤ –Ω—ë–º –µ—Å—Ç—å —á–µ—Ç—ã—Ä–µ —Ä–æ–ª–∏. –≠—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.
     * –û—Ç –±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—É–±–∞—Ö, –∞ —Ç–∞–∫ –∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á–∏, –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã
     * –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∏. –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å —Ç—Ä–µ–±—É—é—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á—Ç–æ–±—ã –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏, –∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Ç–∑—ã–≤—ã.
     * –ê —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ—Ö –∫—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É. */
    private void addCommands(List<Command> list, Command... commands) {
        list.addAll(List.of(commands));
    }

    @Override
    public List<Command> getCommands() {
        //Common Inputs:
        var usernameInput = Reply.builder()
                .preview(context -> send(context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. ‚úçÔ∏è"))
                .action(context -> {
                    var msg = context.getText();
                    if (msg.isBlank() || !msg.contains(" ")) {
                        send(context, "‚ùó –í–≤–µ–¥–∏—Ç–µ –§–ò–û (–∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.");
                        return REPEAT;
                    }
                    String[] fullName = msg.split(" ");
                    if (fullName.length < 3) {
                        send(context, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ).");
                        return REPEAT;
                    }
                    context.put("firstName", fullName[0]);
                    context.put("lastName", fullName[1]);
                    context.put("middleName", fullName[2]);
                    return NEXT;
                });
        var emailInput = Reply.builder()
                .preview(context -> send(context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π email. üìß"))
                .action(context -> {
                    context.put("email", context.getText());
                    return NEXT;
                });
        var phoneInput = Reply.builder()
                .preview(context -> send(context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω. üì±"))
                .action(context -> {
                    var msg = context.getText();
                    if (!TextUtils.isProneNumber(msg)) {
                        send(context, "‚ùó –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \"79106790783\".");
                        return REPEAT;
                    }
                    context.put("phone", msg);
                    return NEXT;
                });
        var inputRate = Reply.builder()
                .preview(context -> send(context, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10!"))
                .action(context -> {
                    var msg = context.getUpdate().getMessage().getText();
                    if (TextUtils.isRange(msg, 0, 10)) {
                        send(context, "–û—Ü–µ–Ω–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!");
                        return NEXT;
                    }
                    return REPEAT;
                });
        var commands = new ArrayList<Command>();
        //UnregisterCommands
        addCommands(commands,
                Command.create("/start")
                        .access(Role.USER)
                        .info("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
                        .action((context -> {
                            send(context, """
                                    üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö –∫–ª—É–±–æ–≤.
                                    
                                    –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
                                    
                                    - üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á–∏ –∫–ª—É–±–æ–≤.
                                    - ‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.
                                    - üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö –∫–ª—É–±–æ–≤.
                                    
                                    –î–ª—è –Ω–∞—á–∞–ª–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.
                                    
                                    üìò –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –∏—Å–ø–æ–ª—å–∑—É–π /help.
                                    """);
                        })).build(),
                Command.create("/register")
                        .info("–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
                        .action(context -> {
                            send(context, "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! üòä");
                        })
                        .input(usernameInput/*, phoneInput, emailInput*/)
                        .post(context -> {
                            var firstName = context.getValue("firstName");
                            var lastName = context.getValue("lastName");
                            var middleName = context.getValue("middleName");
                            var email = context.getValue("email");
                            var phone = context.getValue("phone");
                            send(context, """
                                    ‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã!
                                    
                                    –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
                                    üìõ –§–ò–û: %s %s %s
                                    üì± –¢–µ–ª–µ—Ñ–æ–Ω: %s
                                    üìß Email: %s""".formatted(firstName, lastName, middleName, phone, email));
                            send(context, "‚ÑπÔ∏è –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help! ü§ñ");
                            context.setUserRole(Role.MEMBER.toString());
                        }).build(),
                Command.create("/feedback")
                        .info("–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å.")
                        .access(Role.MEMBER)
                        .action(context -> {
                            send(context, "–ü–æ–∏—Å–∫ –æ–ø—Ä–æ—Å–æ–≤!");
                            var isOk = new Random().nextBoolean();
                            if (isOk) {
                                send(context, "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –∫–ª—É–±–∞ –Ω–µ–º–µ—Ü–∫–æ–≥–æ –æ—Ç 0 –¥–æ 10:");
                                return NEXT;
                            }
                            send(context, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
                            return TERMINATE;
                        })
                        // TODO 2024-12-21 20:25: –ù—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å POST –¥–ª—è —Ä–µ–ø–ª–∞—è.
                        .input(inputRate)
                        .input(context -> {
                            var msg = context.getUpdate().getMessage().getText();
                            if (TextUtils.isRange(msg, 0, 10)) {
                                send(context, "–û—Ü–µ–Ω–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!");
                                return NEXT;
                            }
                            send(context, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10!");
                            return REPEAT;
                        }).build());


        var end = Command.create("/end")
                .info("–ß—Ç–æ–±—ã –∞–ø–Ω—É—Ç—å –ø—Ä–∞–≤–∞ —Ö–∞—Ö–∞—Ö–∞—Ö")
                .access(Role.EMPLOYEES)
                .action(context -> {
                    context.setUserRole(Role.ADMIN.toString());
                    log.debug("Action command /end");
                    return NEXT;
                })
                .input(_ -> {
                    log.debug("/end action reply 1");
                    return NEXT;
                })
                .input(_ -> {
                    log.debug("/end action reply 2");
                    return NEXT;
                }).build();
        var profile = Command.create("/profile")
                .info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ.")
                .access(Role.MEMBER_EMPLOYEES)
                .action(context -> {
                    send(context, "–¢–≤–æ—è —Ä–æ–ª—å: %s".formatted(context.getUserRole()));
                    var firstName = context.getValue("firstName");
                    var lastName = context.getValue("lastName");
                    var middleName = context.getValue("middleName");
                    var email = context.getValue("email");
                    var phone = context.getValue("phone");
                    send(context, """
                            –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
                            üìõ –§–ò–û: %s %s %s
                            üì± –¢–µ–ª–µ—Ñ–æ–Ω: %s
                            üìß Email: %s""".formatted(firstName, lastName, middleName, phone, email));
                    send(context, "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É–π /edit_profile");
                }).build();

        addCommands(commands, Command.create("/edit_profile")
                .access(Role.MEMBER_EMPLOYEES)
                .action(context -> {
                    send(context, "–ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –≤–Ω–æ–≤—å!");
                })
                .input(usernameInput, phoneInput, emailInput)
                .post(context -> send(context, "‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã!")).build());

        addCommands(commands, profile, end);


        addCommands(commands, Command.create("/clubs")
                .access(Role.USER)
                .action(context -> {
                    // TODO 2024-12-22 14:33: –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å uuid.
                    var list = new ArrayList<>(List.of("–ù–µ–º–µ—Ü–∫–∏–π", "–†—É—Å—Å–∫–∏–π", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"));
                    var buttons = list.stream().map(string -> {
                        var button = new InlineKeyboardButton(string);
                        button.setCallbackData(string);
                        button.setText(string);
                        return button;
                    }).toList();
                    var wrappedList = buttons.stream()
                            .map(Arrays::asList)
                            .toList();
                    var keyboard = InlineKeyboardMarkup.builder().keyboard(wrappedList).build();
                    send(context, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±", keyboard);
                }).input(context -> {
                    var club = context.getText();
                    send(context, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª—É–±: " + club);

                    return NEXT;
                })
                .build());

        var help = Command.create("/help")
                .access(Role.ALL)
                .action(context -> {
                    var strBuilder = new StringBuilder();
                    commands.stream()
                            .filter(command ->
                                    (command.getRoles().contains(context.getUserRole()))
                                            && Objects.nonNull(command.getInfo()))
                            .forEach(command -> strBuilder
                                    .append(" - ")
                                    .append(command.getName())
                                    .append(" - ")
                                    .append(command.getInfo())
                                    .append("\n"));
                    var outMsg = "üìò –ö–æ–º–∞–Ω–¥—ã:\n\n";
                    if (strBuilder.isEmpty()) {
                        outMsg = "–ü–æ–∫–∞ —á—Ç–æ –¥–ª—è –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥!";
                    } else {
                        outMsg += strBuilder.toString();
                    }
                    send(context, outMsg);
                    return TERMINATE;
                }).build();

        addCommands(commands, help);
        return commands;
    }
}
